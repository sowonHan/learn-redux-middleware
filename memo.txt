--- 미들웨어(middleware) ---
비동기(axios-api통신) 작업 : 로딩 중, 로딩이 끝났습니다, 에러 발생 등을 사용자에게 알려줘야 하는데 리덕스만으로는 불가능하기 때문에 이런 비동기 작업을 관리하고 처리하기 위해서는 미들웨어가 필요하다.

** 미들웨어가 할 수 있는 일 **
1. 전달받은 액션을 단순히 콘솔에 기록
2. 전달받은 액션을 기반으로 액션을 취소
3. 다른 종류의 액션을 추가로 디스패치

보통 프로젝트를 할 때는 미들웨어를 직접 만들지 않고 남이 만든 미들웨어를 가져다쓴다
ex] redux-logger,
redux-thunk, redux-saga 이 둘은 비동기 처리를 위한 미들웨어

redux-thunk 는 액션에서 type이라는 객체를 반환하는 게 아니라 함수를 반환한다

https://jsonplaceholder.typicode.com/

*** redux-saga 특징 ***
1. ES6에서 생긴 제너레이터 함수를 사용
2. thunk와의 차이 : 조금 더 까다로운 상황에서 쓰인다
    - 기존 요청을 취소할 때 (중복 방지)
    - 특정 액션이 발생했을 때 다른 액션을 발생
    - 웹 소켓 (컴퓨터 통신 프로토콜(통신 규약))
    - api 요청 실패 시 재요청
3. rootSaga를 만들어줘야 함

예시]
1. 일반적인 함수
function test {
  return 1;
  return 2;
  return 3;
}
===> 당연히 안 됨 1만 나옴

2. 제너레이터 함수
function* test() {
  console.log('안녕하세요');
  yield 1;
  console.log('안녕하세요2');
  yield 2;
  console.log('안녕하세요3');
  yield 3;
  return 4;
}
===> const t = test();
t.next();
이렇게 쳤을 때
{value: 2, done: false} 이런 식의 객체를 반환하는데
value는 yield 값이고 done은 끝났는지 아닌지를 나타내줌
{value: 4, done: true} <- return 값
{value: undefined, done: true} <- return 이후로는 없으니까 이렇게 나옴

* MDN 참고하기 *
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function*
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/yield
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator/next


function* sum() {
  let a = yield;
  let b = yield;
  yield a + b;
}
const s = sum();
yield는 순차적으로 값을 받아서 사용한다

디스패치하는 액션을 saga에서 (제너레이터를 이용하여) 모니터링해서 그에 따라 필요한 작업을 따로 수행할 수 있게 해준다
